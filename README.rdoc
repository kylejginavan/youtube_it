== DESCRIPTION

  youtube_it is the most complete Ruby client for the YouTube GData API. It provides an easy
  way to access the latest and most complete access to YouTube's video API.
  In comparison with the earlier Youtube interfaces, this new API and
  library offers much-improved flexibility around executing complex search
  queries to obtain well-targeted video search results.  In addition, standard video management 
  including but not limited to uploading, deleting, updating, like, dislike, ratings and
  comments.
  
== INSTALLATION & SETUP:
  * Create a youtube account.
  * Create a developer key here http://code.google.com/apis/youtube/dashboard.
  * sudo gem install youtube_it

== ESTABLISHING A CLIENT

Creating a client:
  $ require 'youtube_it'
  $ client = YouTubeIt::Client.new

Client with developer key:
  $ client = YouTubeIt::Client.new(:dev_key => "developer_key")
    
Client with youtube account and developer key:
  $ client = YouTubeIt::Client.new(:username => "youtube_username", :password =>  "youtube_passwd", :dev_key => "developer_key")

Client with OAuth:
  $ client = YouTubeIt::OAuthClient.new("consumer_key", "consumer_secret", "youtube_username", "developer_key")
  $ client.authorize_from_access("access_token", "access_secret")

== VIDEO QUERIES

Note:  Each type of client enables searching capabilities.

Basic Queries:
  $ client.videos_by(:query => "penguin")
  $ client.videos_by(:query => "penguin", :page => 2, :per_page => 15)
  $ client.videos_by(:tags => ['tiger', 'leopard'])
  $ client.videos_by(:categories => [:news, :sports])
  $ client.videos_by(:categories => [:news, :sports], :tags => ['soccer', 'football'])
  $ client.videos_by(:user => 'liz')
  $ client.videos_by(:favorites, :user => 'liz')
  $ client.video_by("FQK1URcxmb4")
  $ client.video_by_user("chebyte","FQK1URcxmb4")

Standard Queries:
  $ client.videos_by(:most_viewed)
  $ client.videos_by(:most_linked, :page => 3)
  $ client.videos_by(:top_rated, :time => :today)

Advanced Queries (with boolean operators OR (either), AND (include), NOT (exclude)):
  $ client.videos_by(:categories => { :either => [:news, :sports], :exclude => [:comedy] }, :tags => { :include => ['football'], :exclude => ['soccer'] })

== VIDEO MANAGEMENT

Note: YouTube account or OAuth enables video management.

Upload Video:
  $ client.video_upload(File.open("test.mov"), :title => "test",:description => 'some description', :category => 'People',:keywords => %w[cool blah test])

Upload Video With A Developer Tag (Note the tags are not immediately available):
  $ client.video_upload(File.open("test.mov"), :title => "test",:description => 'some description', :category => 'People',:keywords => %w[cool blah test], :dev_tag => 'tagdev')

Update Video:
  $ client.video_update("FQK1URcxmb4", :title => "new test",:description => 'new description', :category => 'People',:keywords => %w[cool blah test])

Delete Video:
  $ client.video_delete("FQK1URcxmb4")

Profile Details:
  $ client.profile(user_id)

List Comments:
  $ client.comments(video_id)

Add A Comment:
  $ client.add_comment(video_id, "test comment!")

List Favorites:
  $ client.favorites

Add Favorite:
  $ client.add_favorite(video_id)

Delete Favorite:
  $ client.delete_favorite(video_id)

Like A Video:
  $ client.like_video(video_id)

Dislike A Video:
  $ client.dislike_video(video_id)

Subscribe To A Channel:
  $ client.subscribe_channel(channel_name)

List Playlists:
  $ client.playlists

Select Playlist:
  $ client.playlist(playlist_id)

Select All Videos From A Playlist:
  $ playlist = client.playlist(playlist_id)
  $ playlist.videos

Create Playlist:
  $ playlist = client.add_playlist(:title => "new playlist", :description => "playlist description")

Delete Playlist:
  $ client.delete_playlist(playlist_id)

Add Video To Playlist:
  $ client.add_video_to_playlist(playlist_id, video_id)

Remove Video From Playlist:
  $ client.remove_video_from_playlist(playlist_id, playlist_entry_id)

Select Playlists From User:
  $ client.playlists_for(user)
  
== ACCESS CONTROL LIST

  You can give permissions in your videos, for example denied comments, rate, etc...
  you can read more there http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_yt:accessControl
  you have available the followings options:

* :rate, :comment, :commentVote, :videoRespond, :list, :embed, :syndicate

  with just two values:
*    allowed or denied

  Example

  client = YouTubeIt::Client.new(:username => "youtube_username", :password =>  "youtube_passwd", :dev_key => "developer_key")

* upload video with denied comments

  client.video_upload(File.open("test.mov"), :title => "test",:description => 'some description', :category => 'People',:keywords => %w[cool blah test], :comment => "denied")


== Video Upload From Browser:

When uploading a video from your browser you need make a form upload with the followings params:
  $ upload_token(params, nexturl)
params  => params like :title => "title", :description => "description", :category => "People", :tags => ["test"]
nexturl => redirect to this url after upload


Controller
  def upload
    @upload_info = YouTubeIt::Client.new.upload_token(params, videos_url)
  end

View (upload.html.erb)
  <% form_tag @upload_info[:url], :multipart => true do %>
    <%= hidden_field_tag :token, @upload_info[:token] %>
    <%= label_tag :file %>
    <%= file_field_tag :file %>
    <%= submit_tag "Upload video" %>
  <% end %>

== WIDESCREEN VIDEOS

If the videos has support for widescreen:
  $ video.embed_html_with_width(1280)

Note: you can specify width or just use the default of 1280.

== LOGGING

YouTubeIt passes all logs through the logger variable on the class itself. In Rails context, assign the Rails logger to that variable to collect the messages
(don't forget to set the level to debug):
  $ YouTubeIt.logger = RAILS_DEFAULT_LOGGER
  $ RAILS_DEFAULT_LOGGER.level = Logger::DEBUG

== CONTRIBUTORS:

* Kyle J. Ginavan.
* Mauro Torres - http://github.com/chebyte
* Marko Seppa - https://github.com/mseppae

== LICENSE:

MIT License

Copyright (c) 2010 Kyle J. Ginavan

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
